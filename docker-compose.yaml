version: "3.8"
services:
  minio:
    image: minio/minio:RELEASE.2025-02-18T16-25-55Z-cpuv1
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminpassword}
    command: server /data --console-address ":9090"
    volumes:
      - minio_storage:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  setup:
    image: alpine:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./setup_scripts:/scripts
    entrypoint: /bin/sh -c "
      echo 'Instalando herramientas necesarias...';
      apk add --no-cache curl wget netcat-openbsd;

      echo 'Descargando e instalando mc...';
      wget -q https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc;
      chmod +x /usr/local/bin/mc;

      echo 'Configurando MinIO client...';
      /usr/local/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};

      echo 'Creando bucket si no existe...';
      /usr/local/bin/mc mb myminio/${MINIO_BUCKET_NAME} || echo 'El bucket ya existe';
      
      echo 'Configurando políticas de acceso...';
      /usr/local/bin/mc policy set ${BUCKET_POLICY} myminio/${MINIO_BUCKET_NAME};
      
      echo 'Configuración completada exitosamente';
      "
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminpassword}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-my-test-bucket}
      - BUCKET_POLICY=${BUCKET_POLICY:-public}

  s3fs:
    image: ubuntu:jammy-20250126
    container_name: s3fs
    privileged: true
    depends_on:
      setup:
        condition: service_completed_successfully
    volumes:
      - ./s3fs_mount:/mnt/s3fs
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        apt update && apt install -y s3fs fuse curl
        echo "${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}" > /root/.passwd-s3fs
        chmod 600 /root/.passwd-s3fs
        
        # Esperar a que MinIO esté disponible
        until curl -sf http://minio:9000/minio/health/live; do
          echo "Esperando a que MinIO esté listo..."
          sleep 2
        done
        
        mkdir -p /mnt/s3fs
        s3fs ${MINIO_BUCKET_NAME} /mnt/s3fs \
          -o passwd_file=/root/.passwd-s3fs \
          -o url=http://minio:9000 \
          -o use_path_request_style \
          -o allow_other \
          -o dbglevel=info \
          -o curldbg
        
        echo "S3FS montado exitosamente en /mnt/s3fs"
        tail -f /dev/null
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminpassword}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-my-test-bucket}

  python-client:
    image: bitnami/python:3.13.2-debian-12-r11
    container_name: python-client
    depends_on:
      setup:
        condition: service_completed_successfully
    volumes:
      - ./python:/app
    working_dir: /app
    environment:
      - MINIO_SERVER=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-adminpassword}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-my-test-bucket}
    command: sh -c "pip install -r requirements.txt && python minio_client.py"

volumes:
  minio_storage:
    driver: local