lonewoft
crow
docker

  load_bucked_minio git:(main) ✗ docker logs python-client
ERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt'
➜  load_bucked_minio git:(main) ✗ 
son los erroes


load_bucked_minio git:(main) ✗ docker logs minio-setup
Instalando herramientas necesarias...
fetch https://dl-cdn.alpinelinux.org/alpine/v3.21/main/x86_64/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.21/community/x86_64/APKINDEX.tar.gz
(1/14) Installing brotli-libs (1.1.0-r2)
(2/14) Installing c-ares (1.34.3-r0)
(3/14) Installing libunistring (1.2-r0)
(4/14) Installing libidn2 (2.3.7-r0)
(5/14) Installing nghttp2-libs (1.64.0-r0)
(6/14) Installing libpsl (0.21.5-r3)
(7/14) Installing zstd-libs (1.5.6-r2)
(8/14) Installing libcurl (8.12.1-r0)
(9/14) Installing curl (8.12.1-r0)
(10/14) Installing libmd (1.1.0-r0)
(11/14) Installing libbsd (0.12.2-r0)
(12/14) Installing netcat-openbsd (1.226.1.1-r0)
(13/14) Installing pcre2 (10.43-r0)
(14/14) Installing wget (1.25.0-r0)
Executing busybox-1.37.0-r12.trigger
OK: 13 MiB in 29 packages
Descargando e instalando mc...
Configurando MinIO client...
Added `myminio` successfully.
Creando bucket si no existe...
Bucket created successfully `myminio/my-test-bucket`.
Configurando políticas de acceso...
mc: Please use 'mc anonymous'
Configuración completada exitosamente
➜  load_bucked_minio git:(main) ✗ 


errores en la automatizaction de la iamgen minio-setup y python-client infiero las credenciales noconfiguradas para el primero peor si crea el bucket y el segundo no tiene permisos para el file requirements infiero 
comaprto estructura del directorio actual 
load_bucked_minio git:(main) ✗ tree
.
├── app
│   ├── example.txt
│   ├── minio_client.py
│   └── requirements.txt
├── docker-compose.yaml
├── python
├── README.md
├── s3fs_mount
└── setup_scripts

5 directories, 5 files
➜  load_bucked_minio git:(main) ✗ 

te comaprto docker-compose.yaml para que lo analices y resulvas soluciones 
version: "3.8"
services:
  minio:
    image: minio/minio:RELEASE.2025-02-18T16-25-55Z-cpuv1
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminpassword}
    command: server /data --console-address ":9090"
    volumes:
      - minio_storage:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  setup:
    image: alpine:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./setup_scripts:/scripts
    entrypoint: /bin/sh -c "
      echo 'Instalando herramientas necesarias...';
      apk add --no-cache curl wget netcat-openbsd;

      echo 'Descargando e instalando mc...';
      wget -q https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc;
      chmod +x /usr/local/bin/mc;

      echo 'Configurando MinIO client...';
      /usr/local/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};

      echo 'Creando bucket si no existe...';
      /usr/local/bin/mc mb myminio/${MINIO_BUCKET_NAME} || echo 'El bucket ya existe';
      
      echo 'Configurando políticas de acceso...';
      /usr/local/bin/mc policy set ${BUCKET_POLICY} myminio/${MINIO_BUCKET_NAME};
      
      echo 'Configuración completada exitosamente';
      "
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminpassword}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-my-test-bucket}
      - BUCKET_POLICY=${BUCKET_POLICY:-public}

  s3fs:
    image: ubuntu:jammy-20250126
    container_name: s3fs
    privileged: true
    depends_on:
      setup:
        condition: service_completed_successfully
    volumes:
      - ./s3fs_mount:/mnt/s3fs
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        apt update && apt install -y s3fs fuse curl
        echo "${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}" > /root/.passwd-s3fs
        chmod 600 /root/.passwd-s3fs
        
        # Esperar a que MinIO esté disponible
        until curl -sf http://minio:9000/minio/health/live; do
          echo "Esperando a que MinIO esté listo..."
          sleep 2
        done
        
        mkdir -p /mnt/s3fs
        s3fs ${MINIO_BUCKET_NAME} /mnt/s3fs \
          -o passwd_file=/root/.passwd-s3fs \
          -o url=http://minio:9000 \
          -o use_path_request_style \
          -o allow_other \
          -o dbglevel=info \
          -o curldbg
        
        echo "S3FS montado exitosamente en /mnt/s3fs"
        tail -f /dev/null
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminpassword}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-my-test-bucket}

  python-client:
    image: bitnami/python:3.13.2-debian-12-r11
    container_name: python-client
    depends_on:
      setup:
        condition: service_completed_successfully
    volumes:
      - ./python:/app
    working_dir: /app
    environment:
      - MINIO_SERVER=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-adminpassword}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-my-test-bucket}
    command: sh -c "pip install -r requirements.txt && python minio_client.py"

volumes:
  minio_storage:
    driver: local