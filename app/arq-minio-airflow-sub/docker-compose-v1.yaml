version: "3.8"

x-airflow-common: &airflow-common
  image: apache/airflow:2.7.3
  environment: &airflow-common-env
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: A8B9cDeFgHiJkLmNoPqRsTuVwXyZ0123456789=
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: 'your_secret_key_here'
    # Configuración para MinIO
    AIRFLOW_CONN_MINIO_DEFAULT: 'minio://minioadmin:minioadmin@minio:9000'
    # Configuración para Spark
    AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-master:7077'
    JAVA_HOME: '/usr/lib/jvm/java-11-openjdk-amd64'
  volumes:
    - airflow_logs:/opt/airflow/logs
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./spark:/opt/airflow/spark
    - ./data:/opt/airflow/data
    - ./requirements:/opt/airflow/requirements
  user: "50000:0"
  networks:
    - bigdata-network
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  # Capa de Almacenamiento
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      timeout: 30s

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Capa de Mensajería
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8089:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - bigdata-network

  # Capa de Procesamiento - Spark
  spark-master:
    image: bitnami/spark:3.3.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8081
    ports:
      - "7077:7077"
      - "8081:8081"
    volumes:
      - ./spark:/opt/bitnami/spark/work
      - ./data:/opt/bitnami/spark/data
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 3

  spark-worker:
    image: bitnami/spark:3.3.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      - spark-master
    volumes:
      - ./spark:/opt/bitnami/spark/work
      - ./data:/opt/bitnami/spark/data
    networks:
      - bigdata-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "3g"

  # Capa de Orquestación - Airflow
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        pip install --user -r /opt/airflow/requirements/requirements.txt
        
        function check_db() {
          airflow db check
          return $?
        }
        
        while ! nc -z postgres 5432; do 
          echo 'Esperando a PostgreSQL...' 
          sleep 2
        done
        
        if ! check_db; then
          echo "Inicializando base de datos de Airflow..."
          airflow db init
          airflow db upgrade
          airflow users create \
            --role Admin \
            --username admin \
            --password admin \
            --firstname Admin \
            --lastname Admin \
            --email admin@example.com
          
          # Crear conexiones para Spark y MinIO
          airflow connections add 'spark_default' \
            --conn-type 'spark' \
            --conn-host 'spark-master' \
            --conn-port '7077'
            
          airflow connections add 'minio_default' \
            --conn-type 's3' \
            --conn-login 'minioadmin' \
            --conn-password 'minioadmin' \
            --conn-host 'minio' \
            --conn-port '9000'
            
          airflow connections add 'kafka_default' \
            --conn-type 'kafka' \
            --conn-host 'kafka' \
            --conn-port '9092'
        else
          echo "Base de datos de Airflow ya inicializada"
        fi
        
        echo "Inicialización completada"
        exit 0
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bigdata-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    command: bash -c "pip install --user -r /opt/airflow/requirements/requirements.txt && airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    command: bash -c "pip install --user -r /opt/airflow/requirements/requirements.txt && airflow scheduler"
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5

  # Capa de Observabilidad
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8088:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - bigdata-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "500M"

volumes:
  postgres_data:
  minio_data:
  airflow_logs:

networks:
  bigdata-network:
    driver: bridge