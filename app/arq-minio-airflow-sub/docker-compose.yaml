version: "3.8"

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: docker/airflow.Dockerfile
  environment: &airflow-common-env
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: A8B9cDeFgHiJkLmNoPqRsTuVwXyZ0123456789=
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: 'your_secret_key_here'
    # Configuración para MinIO
    AIRFLOW_CONN_MINIO_DEFAULT: 'minio://minioadmin:minioadmin@minio:9000'
    # Configuración para Spark
    AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-master:7077'
    JAVA_HOME: '/usr/lib/jvm/java-11-openjdk-amd64'
  volumes:
    - airflow_logs:/opt/airflow/logs
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./spark:/opt/airflow/spark
    - ./data:/opt/airflow/data
  user: "50000:0"
  networks:
    - spark-network
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:12
    container_name: postgres_airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spark-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      timeout: 30s

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9090"
    volumes:
      - minio_storage:/data
    networks:
      - spark-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function check_db() {
          airflow db check
          return $?
        }
        
        while ! nc -z postgres 5432; do 
          echo 'Esperando a PostgreSQL...' 
          sleep 2
        done
        
        if ! check_db; then
          echo "Inicializando base de datos de Airflow..."
          airflow db init
          airflow db upgrade
          airflow users create \
            --role Admin \
            --username admin \
            --password admin \
            --firstname Admin \
            --lastname Admin \
            --email admin@example.com
          
          # Crear conexiones para Spark y MinIO
          airflow connections add 'spark_default' \
            --conn-type 'spark' \
            --conn-host 'spark-master' \
            --conn-port '7077'
            
          airflow connections add 'minio_default' \
            --conn-type 'minio' \
            --conn-login 'minioadmin' \
            --conn-password 'minioadmin' \
            --conn-host 'minio' \
            --conn-port '9000'
        else
          echo "Base de datos de Airflow ya inicializada"
        fi
        
        echo "Inicialización completada"
        exit 0
    environment:
      <<: *airflow-common-env
    volumes:
      - airflow_logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./spark:/opt/airflow/spark
      - ./data:/opt/airflow/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spark-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      airflow-webserver:
        condition: service_healthy
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5

  spark-master:
    build:
      context: .
      dockerfile: docker/spark.Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8081
    ports:
      - "7077:7077"
      - "8081:8081"
    volumes:
      - ./spark:/opt/spark/work
      - ./data:/opt/spark/data
    networks:
      - spark-network
    command: bash -c "/opt/entrypoint.sh && tail -f /dev/null"
    restart: always

  spark-worker:
    build:
      context: .
      dockerfile: docker/spark.Dockerfile
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      - spark-master
    volumes:
      - ./spark:/opt/spark/work
      - ./data:/opt/spark/data
    networks:
      - spark-network
    command: bash -c "/opt/entrypoint.sh && tail -f /dev/null"
    restart: always

volumes:
  postgres_data:
  minio_storage:
  airflow_logs:

networks:
  spark-network:
    driver: bridge
